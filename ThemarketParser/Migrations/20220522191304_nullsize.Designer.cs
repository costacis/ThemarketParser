// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThemarketParser.Data;

#nullable disable

namespace ThemarketParser.Migrations
{
    [DbContext(typeof(ThemarketDBContext))]
    [Migration("20220522191304_nullsize")]
    partial class nullsize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BrandItem", b =>
                {
                    b.Property<string>("brandsid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("itemsid")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("brandsid", "itemsid");

                    b.HasIndex("itemsid");

                    b.ToTable("BrandItem");
                });

            modelBuilder.Entity("ThemarketParser.Models.Brand", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ThemarketParser.Models.CategoryAbstract", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("parentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("parentCategoryId");

                    b.ToTable("CategoryAbstract");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CategoryAbstract");
                });

            modelBuilder.Entity("ThemarketParser.Models.City", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ThemarketParser.Models.Condition", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("trnslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("ThemarketParser.Models.Image", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("itemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("itemId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ThemarketParser.Models.Item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("addedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<int>("concreteCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("conditionId")
                        .HasColumnType("int");

                    b.Property<int>("deliveryPrice")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("likesCount")
                        .HasColumnType("int");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prettyPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("sexCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("sizeId")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("cityId");

                    b.HasIndex("concreteCategoryId");

                    b.HasIndex("conditionId");

                    b.HasIndex("sexCategoryId");

                    b.HasIndex("sizeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ThemarketParser.Models.Size", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("eur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("us")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("ThemarketParser.Models.Category", b =>
                {
                    b.HasBaseType("ThemarketParser.Models.CategoryAbstract");

                    b.HasDiscriminator().HasValue("Category");
                });

            modelBuilder.Entity("ThemarketParser.Models.ConcreteCategory", b =>
                {
                    b.HasBaseType("ThemarketParser.Models.CategoryAbstract");

                    b.Property<string>("sizesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ConcreteCategory");
                });

            modelBuilder.Entity("ThemarketParser.Models.SexCategory", b =>
                {
                    b.HasBaseType("ThemarketParser.Models.CategoryAbstract");

                    b.HasDiscriminator().HasValue("SexCategory");
                });

            modelBuilder.Entity("BrandItem", b =>
                {
                    b.HasOne("ThemarketParser.Models.Brand", null)
                        .WithMany()
                        .HasForeignKey("brandsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("itemsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThemarketParser.Models.CategoryAbstract", b =>
                {
                    b.HasOne("ThemarketParser.Models.CategoryAbstract", "parentCategory")
                        .WithMany("childCategories")
                        .HasForeignKey("parentCategoryId");

                    b.Navigation("parentCategory");
                });

            modelBuilder.Entity("ThemarketParser.Models.Image", b =>
                {
                    b.HasOne("ThemarketParser.Models.Item", "item")
                        .WithMany("images")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("ThemarketParser.Models.Item", b =>
                {
                    b.HasOne("ThemarketParser.Models.Category", "category")
                        .WithMany("items")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.City", "city")
                        .WithMany("items")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.ConcreteCategory", "concreteCategory")
                        .WithMany("items")
                        .HasForeignKey("concreteCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.Condition", "condition")
                        .WithMany("items")
                        .HasForeignKey("conditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.SexCategory", "sexCategory")
                        .WithMany("items")
                        .HasForeignKey("sexCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ThemarketParser.Models.Size", "size")
                        .WithMany("items")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("city");

                    b.Navigation("concreteCategory");

                    b.Navigation("condition");

                    b.Navigation("sexCategory");

                    b.Navigation("size");
                });

            modelBuilder.Entity("ThemarketParser.Models.Size", b =>
                {
                    b.HasOne("ThemarketParser.Models.ConcreteCategory", "category")
                        .WithMany("size")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("ThemarketParser.Models.CategoryAbstract", b =>
                {
                    b.Navigation("childCategories");
                });

            modelBuilder.Entity("ThemarketParser.Models.City", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("ThemarketParser.Models.Condition", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("ThemarketParser.Models.Item", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("ThemarketParser.Models.Size", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("ThemarketParser.Models.Category", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("ThemarketParser.Models.ConcreteCategory", b =>
                {
                    b.Navigation("items");

                    b.Navigation("size");
                });

            modelBuilder.Entity("ThemarketParser.Models.SexCategory", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
